<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_slack_intg.SlackUtils</api_name>
        <client_callable>false</client_callable>
        <description>Helper methods to Integration with Slack</description>
        <name>SlackUtils</name>
        <script><![CDATA[var SlackUtils = Class.create();
SlackUtils.prototype = {
	
	TABLES : {
		SLACK_USERS    : 'x_snc_slack_intg_slack_users',
		SLACK_CHANNELS : 'x_snc_slack_intg_slack_channels',
		SLACK_EVENTS   : 'x_snc_slack_intg_slack_events',
		SLACK_COMMANDS : 'x_snc_slack_intg_slack_commands'
	},
	
	REST_MESSAGE  : 'x_snc_slack_intg.Slack',
	
	REST_FUNCTION : {
		CREATE_CHANNEL : 'Create Channel',
		POST_MESSAGE   : 'Post Message',
		LOOKUP_USER    : 'Lookup User By Mail',
		USER_INFO      : 'User Info',
		INVITE_USER    : 'Invite User',
		FETCH_FILE     : 'Fetch File'
	},
	
	FILE_HOST        : 'https://files.slack.com/files-pri/',

	DEBUG : true,
	
	initialize: function() {
	},
	
	/*
 	* Returns true if a channel is created for this task
 	*/
	createChannel: function(task) {
		if(!task || !task.isValidRecord || !task.isValidRecord() || !task.number || !task.sys_id || !task.short_description){
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		var payload = {name: this._getTaskChannelName(task), is_private: "false"};
		try {
			var req = new sn_ws.RESTMessageV2(this.REST_MESSAGE, this.REST_FUNCTION.CREATE_CHANNEL);
			var content = JSON.stringify(payload);
			this._log('SlackUtils.createChannel:Request - ' + content);
			req.setRequestBody(content);
			var res = req.execute();
			var resText = res.getBody();
			var resStatus = res.getStatusCode();
			this._log('SlackUtils.createChannel:Response - ' + resText + ' - ' + resStatus);
			var response = new global.JSON().decode(resText);
			if(response.ok == true) {
				this._persistChannelInfo(task, response);
				return response.channel.name;
			}
			this._handleErrorResponse(response);
		}
		catch(ex) {
			gs.addErrorMessage('Unknown Error - ' + ex.message);
			this._log('SlackUtils.createChannel: Unknown Error - ' + ex);
		}
		return;
	},
		
	postTaskMessage: function(task, fieldsToPost) {
		if(!task || !task.isValidRecord || !task.isValidRecord() || !task.sys_id || !task.number) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		var channelId = this._getChannelId(task);
		if(!channelId || gs.nil(channelId)) {
			gs.addErrorMessage(gs.getMessage('Slack channel is not created for this task'));
			return;
		}
		
		if(!fieldsToPost || gs.nil(fieldsToPost))
			fieldsToPost = 'short_description,account,contact,product,asset';
		var payload = this._createTaskPayload(channelId, '', task, fieldsToPost);
		
		return this._postMessage(payload);
	},
		
	postMessage: function(task, message, user) {
		if(!task || !task.isValidRecord || !task.isValidRecord() || !task.sys_id || !message || gs.nil(message.trim())) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		var channelId = this._getChannelId(task);
		if(!channelId || gs.nil(channelId.trim())) {
			gs.addErrorMessage(gs.getMessage('Slack channel is not created for this task'));
			return;
		}

		var payload = {};
		payload.text = '';
		payload.channel = channelId.trim();
		
		payload.attachments = [];
		var fields = [];
		
		var fieldValue = this._htmlEscape(message.trim());
		var isShort = fieldValue.length > 30 ? false : true;

		fields.push({
			"title": 'Posted By User : ' + user,
			"value": fieldValue,
			"short": isShort
		});
		
		payload.attachments.push({
			text: '',
			fallback: payload.text,
			fields: fields
		});
		return this._postMessage(payload);
	},
	
	inviteUser: function(task, user) {
		if(!task || !task.isValidRecord || !task.isValidRecord() || !task.sys_id) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		if(!user || !user.isValidRecord || !user.isValidRecord()) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		var channelId = this._getChannelId(task);
		if(!channelId || gs.nil(channelId.trim())) {
			gs.addErrorMessage(gs.getMessage('Slack channel is not created for this task'));
			return;
		}
		
		var userId = this._getSlackUserId(user.sys_id + '');
		if(!userId || gs.nil(userId.trim())) {
			var userRec = this._populateUserInfo(user);
			if(userRec)
				userId = userRec.id + '';
		}
		
		if(!userId || gs.nil(userId.trim())) {
			gs.addErrorMessage(gs.getMessage('Couldn\'t find slack account of user {0} using his mail id {1}', [user.user_name + '', user.email + '']));
			return;
		}

		var payload = {};
		payload.channel = channelId;
		payload.user = userId;
		
		try {
			var req = new sn_ws.RESTMessageV2(this.REST_MESSAGE, this.REST_FUNCTION.INVITE_USER);
			var content = JSON.stringify(payload);
			this._log('SlackUtils.inviteUser:Request - ' + content);
			req.setRequestBody(content);
			var res = req.execute();
			var resText = res.getBody();
			var resStatus = res.getStatusCode();
			this._log('SlackUtils.inviteUser:Response - ' + resText + ' - ' + resStatus);
			var response = new global.JSON().decode(resText);
			if(response.ok == true) {
				return true;
			}
			this._handleErrorResponse(response);
		}
		catch(ex) {
			gs.addErrorMessage('Unknown Error - ' + ex.message);
			this._log('SlackUtils.inviteUser: Unknown Error - ' + ex);
		}
		return;
		
	},
	
	/*
	 * Returns true if given task has a channel.
	 */
	hasChannel: function(task) {
		if(!task || !task.isValidRecord || !task.isValidRecord() || !task.sys_id || !task.number) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		var channelId = this._getChannelId(task);
		
		return channelId && !gs.nil(channelId.trim());
	},
		
	_populateUserInfo: function(user) {
		if(!user || !user.isValidRecord || !user.isValidRecord()) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		if(!user.email || gs.nil(user.email.trim())) {
			gs.addErrorMessage(gs.getMessage('User does not have email configured'));
			return;
		}
		
		var content = "email="+encodeURIComponent(user.email.trim());
		try {
			this._log('SlackUtils._populateUserInfo:Request - ' + content);
			var req = new sn_ws.RESTMessageV2(this.REST_MESSAGE, this.REST_FUNCTION.LOOKUP_USER);
			req.setRequestBody(content);
			var res = req.execute();
			var resText = res.getBody();
			var resStatus = res.getStatusCode();
			this._log('SlackUtils._populateUserInfo:Response - ' + resText + ' - ' + resStatus);
			var response = new global.JSON().decode(resText);
			if(response.ok == true) {
				var users = new GlideRecord(this.TABLES.SLACK_USERS);
				users.initialize();
				users.id = response.user.id;
				users.name = response.user.real_name;
				users.user = user.sys_id + '';
				users.insert();
				return users;
			}
			this._handleErrorResponse(response);
		}
		catch(ex) {
			gs.addErrorMessage('Unknown Error - ' + ex.message);
			this._log('SlackUtils._populateUserInfo: Unknown Error - ' + ex);
		}	
		return;
	},
		
	_populateUserInfoFromSlackID: function(userId) {
		if(!userId) {
			gs.addErrorMessage(gs.getMessage('Invalid or missing arguments'));
			return;
		}
		
		var content = "user="+encodeURIComponent(userId.trim());
		try {
			this._log('SlackUtils._populateUserInfoFromSlackID:Request - ' + content);
			var req = new sn_ws.RESTMessageV2(this.REST_MESSAGE, this.REST_FUNCTION.USER_INFO);
			req.setRequestBody(content);
			var res = req.execute();
			var resText = res.getBody();
			var resStatus = res.getStatusCode();
			this._log('SlackUtils._populateUserInfoFromSlackID:Response - ' + resText + ' - ' + resStatus);
			var response = new global.JSON().decode(resText);
			if(response.ok == true) {
				var sysUser = new GlideRecord('sys_user');
				sysUser.addQuery('email', response.user.profile.email);
				sysUser.query();
				if(sysUser.next()) {
					var users = new GlideRecord(this.TABLES.SLACK_USERS);
					users.initialize();
					users.id = response.user.id;
					users.name = response.user.real_name;
					users.user = sysUser.sys_id + '';
					users.insert();
					return users;
				}
				else {
					gs.addErrorMessage(gs.getMessage('Couldn\'t find user account of slack user {0} with mail id {1}', [response.user.real_name + '', response.user.profile.email + '']));
				}
			}
			this._handleErrorResponse(response);
		}
		catch(ex) {
			gs.addErrorMessage('Unknown Error - ' + ex.message);
			this._log('SlackUtils._populateUserInfoFromSlackID: Unknown Error - ' + ex);
		}	
		return;
	},
	
	_getSlackUserId: function(userSysId) {
		var users = new GlideRecord(this.TABLES.SLACK_USERS);
		if(users.get('user', userSysId))
			return users.id + '';
		return;
	},
	
	_getUserRecord: function(slackUserId) {
		var users = new GlideRecord(this.TABLES.SLACK_USERS);
		if(users.get('id', slackUserId))
			return users;
		return;
	},
	
	_postMessage: function(payload) {
		try {
			var content = JSON.stringify(payload);
			this._log('SlackUtils._postMessage:Request - ' + content);
			var req = new sn_ws.RESTMessageV2(this.REST_MESSAGE, this.REST_FUNCTION.POST_MESSAGE);
			req.setRequestBody(content);
			var res = req.execute();
			var resText = res.getBody();
			var resStatus = res.getStatusCode();
			this._log('SlackUtils._postMessage:Response - ' + resText + ' - ' + resStatus);
			var response = new global.JSON().decode(resText);
			if(response.ok == true)
				return true;
			this._handleErrorResponse(response);
		}
		catch(ex) {
			gs.addErrorMessage('Unknown Error - ' + ex.message);
			this._log('SlackUtils._postMessage: Unknown Error - ' + ex);
		}	
		return false;
	},
	
	_getChannelId: function(task) {
		var channel = new GlideRecord(this.TABLES.SLACK_CHANNELS);
		if(channel.get('task', task.sys_id + ''))
			return channel.id + '';
		return;
	},
	
	_getChannelTaskRecord: function(channelId) {
		var channel = new GlideRecord(this.TABLES.SLACK_CHANNELS);
		if(channel.get('id', channelId))
			return channel.task.getRefRecord();
		return;
	},
	
	_getTaskChannelName: function(task) {
		var cName = task.number + '-' + task.short_description;
		var e1 = new RegExp(' ', 'g');
		var e2 = new RegExp('[^0-9a-z-]', 'g');
		return cName.toLowerCase().replace(e1, '-').replace(e2, '').substring(0, 20);
	},

	_persistChannelInfo: function(task, response) {
		var channel = new GlideRecord(this.TABLES.SLACK_CHANNELS);
		channel.initialize();
		channel.id = response.channel.id;
		channel.name = response.channel.name;
		channel.task = task.sys_id + '';
		channel.insert();
	},

	_createTaskPayload: function(channelId, message, record, recordFields) {
		if(!channelId || gs.nil(channelId) || !record || !record.isValidRecord || !record.isValidRecord() || !record.number)
			return;

		var payload = {};
		payload.text = message && !gs.nil(message.trim()) ? this._htmlEscape(message.trim()) : '';
		payload.channel = channelId.trim();
		
		payload.attachments = [];
		var fields = [];
		var fieldsToSend = recordFields.split(',');
		var _this = this;

		fieldsToSend.forEach(function(fieldName) {
			fieldName = fieldName.trim();
			if(record.isValidField(fieldName)) {
				var fieldValue = record.getDisplayValue(fieldName) || '';
				var isShort = (fieldValue.length > 30 || fieldName == 'short_description') ? false : true;

				if (fieldValue && !gs.nil(fieldValue)) {
					fieldValue = _this._htmlEscape(fieldValue);
					fields.push({
						"title": record[fieldName].getLabel(),
						"value": fieldValue,
						"short": isShort
					});
				}
			}
		});

		var taskNumber = record.getDisplayValue('number');
		var recordLink = record.getLink();
		var taskLink = gs.getProperty('glide.servlet.uri') + recordLink;
		var taskUrl = '<' + taskLink + '|' + taskNumber + '>';

		payload.attachments.push({
			text: taskUrl,
			fallback: payload.text,
			fields: fields
		});

		return payload;
	},

	_handleErrorResponse: function(response) {
		switch(response.error) {
			case "name_taken":
				gs.addErrorMessage(gs.getMessage("Channel with name already exists"));
				break;
			case "invalid_name":
			case "no_channel":
			case "invalid_name_required":
			case "invalid_name_punctuation":
			case "invalid_name_maxlength":
			case "invalid_name_specials":
				gs.addErrorMessage(gs.getMessage("Channel name is Invalid"));
				break;
			case "channel_not_found":
				gs.addErrorMessage(gs.getMessage("Invalid Channel ID"));
				break;
			case "user_not_found":
			case "no_such_user":
			case "username_required":
			case "invalid_username":
			case "unknown_user":
				gs.addErrorMessage(gs.getMessage("User Name is Invalid or Missing"));
				break;
			case "msg_too_long":
				gs.addErrorMessage(gs.getMessage("Message Text Too Long"));
				break;
			case "no_text":
				gs.addErrorMessage(gs.getMessage("Message Text is Missing"));
				break;
			case "no_such_group":
				gs.addErrorMessage(gs.getMessage("Group Not Found"));
				break;
			case "not_authed":
			case "not_in_channel":
			case "restricted_action":
			case "is_archived":
			case "restricted_action_read_only_channel":
			case "restricted_action_thread_only_channel":
			case "rate_limited":
				gs.addErrorMessage(gs.getMessage("Unauthorized. Please Check Oauth Token."));
				break;
			case "invalid_auth":
			case "account_inactive":
			case "not_authed":
			case "token_revoked":
				gs.addErrorMessage(gs.getMessage("Insufficient Permissions. Please Check OAuth Token and scope permission"));
				break;
			case "no_permission":
			case "user_is_restricted":
			case "user_is_bot":
				gs.addErrorMessage(gs.getMessage("Forbidden Request. Please Check OAuth Token and scope permission"));
				break;
			case "invalid_arg_name":
			case "invalid_array_arg":
			case "invalid_charset":
			case "invalid_form_data":
			case "invalid_post_type":
			case "missing_post_type":
				gs.addErrorMessage(gs.getMessage("Invalid Connection"));
				break;
			default:
				gs.addErrorMessage(gs.getMessage("Unknown Error - {0}", JSON.stringify(response)));
				break;
		}
	},

	_htmlEscape: function(str) {
		return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
	},
	
	handleEventRequest: function(request, response) {
		var payloadObj = request.body ? request.body.data : '';
		var payloadStr = JSON.stringify(payloadObj);
		this._log('Slack Event Processor: Payload ' + payloadStr);
		if(!payloadObj) {
			response.setContentType('application/json');
			response.setStatus(400); //Bad Request
			response.getStreamWriter().writeString('{"error":"Invalid Request"}');
		}
		else if(!payloadObj || !payloadObj.token || payloadObj.token != 'USnUCwR6awOfZhoTS5UNkzsa') {
			response.setContentType('application/json');
			response.setStatus(400); //Bad Request
			response.getStreamWriter().writeString('{"error":"Invalid Request."}');
		}
		else if (payloadObj.type == "url_verification") {
			//Initial verification
			response.setContentType('application/json');
			response.setStatus(200); //OK
			response.getStreamWriter().writeString('{"challenge":payloadObj.challenge}');
		}
		else if(payloadObj.api_app_id == 'AE2K8KMEV'){
			//Process Event
			var event = payloadObj.event;
			if(event && event.username != "Now") {
				var events = new GlideRecord(this.TABLES.SLACK_EVENTS);
				events.initialize();
				events.id = payloadObj.event_id;
				events.payload = payloadStr;
				events.type = payloadObj.event.type;
				events.time = payloadObj.event_time;
				events.status = 'pending';
				events.insert();
			}
			else {
				this._log('Slack Event Processor: Event Ignored ');
			}
			response.setContentType('application/json');
			response.setStatus(200);
			response.getStreamWriter().writeString('{"status":"OK"}');
		}
		else {
			response.setContentType('application/json');
			response.setStatus(400); //Bad Request
			response.getStreamWriter().writeString('{"error":"Invalid Request."}');
			this._log('Invalid Request');
		}
	},
	
	processEvent: function(eventRec) {
		if(eventRec && eventRec.payload) {
			var completed = false;
			var payloadObj = JSON.parse(eventRec.payload + '');
			if(payloadObj.event.type == 'message' && (!payloadObj.event.subtype || (payloadObj.event.subtype != 'channel_join' && payloadObj.event.subtype != 'message_changed'))) {
				var helper = new global.SlackGlobalHelper();
				var userSlackID = payloadObj.event.user;
				var userSysId, userRec = this._getUserRecord(userSlackID);
				if(!userRec)
					userRec = this._populateUserInfoFromSlackID(userSlackID);
				
				if(userRec)
					userSysId = userRec.user + '';
				
				var channelId = payloadObj.event.channel;
				if(channelId && !gs.nil(channelId)) {
					var taskRec = this._getChannelTaskRecord(channelId);
					var message = payloadObj.event.text;
					var oldUser = helper.impersonateUser(userSysId);

					if(payloadObj.event.files && payloadObj.event.files.length && payloadObj.event.files.length > 0) {
						var files = payloadObj.event.files;
						var filesLen = files.length;
						for(var i = 0; i < filesLen; i++) {
							var file = files[i];
							var attaId = this._saveFileAsAttachment({url: file.url_private, 
																	   tableName: taskRec.getTableName(), 
																	   recordSysId: taskRec.sys_id + '', 
																	   fileName: file.name});
							
							if(attaId && !gs.nil(attaId))
								completed = true;
							else {
								gs.addErrorMessage(gs.getMessage('Unable to download file ' + file.name + ' uploaded to slack'));
								this._log('Unable to download file ' + file.name + ' uploaded to slack');
							}	
						}
					}
					if(message && !gs.nil(message)) {
						taskRec.work_notes = message;
						taskRec.update();
						completed = true;
					}
					helper.impersonateUser(oldUser);
				}
			}
			eventRec.status = completed == true ? 'completed' : 'ignored';
			eventRec.update();
		}
	},
	
	_saveFileAsAttachment: function(params) {
		try {
			var fileUrl = params.url.substring(this.FILE_HOST.length);
			this._log('SlackUtils._saveFileAsAttachment:Request - ' + JSON.stringify(params));
			var req = new sn_ws.RESTMessageV2(this.REST_MESSAGE, this.REST_FUNCTION.FETCH_FILE);
			req.setStringParameterNoEscape('fileUrl', fileUrl);
			req.saveResponseBodyAsAttachment(params.tableName, params.recordSysId, params.fileName);
			var res = req.execute();
			var resStatus = res.getStatusCode();
			var attId = res.getResponseAttachmentSysid();
			this._log('SlackUtils._saveFileAsAttachment:Response - Status - ' + resStatus + ', Attachment Id - ' + attId);
			return attId;
		}
		catch(ex) {
			gs.addErrorMessage('Unknown Error - ' + ex.message);
			this._log('SlackUtils._saveFileAsAttachment: Unknown Error - ' + ex);
		}	
		return;
	},
	
	handleCommandRequest: function(request, response) {
		var payloadObj = request.queryParams ? request.queryParams : '';
		var payloadStr = JSON.stringify(payloadObj);
		gs.info('Slack Command Processor: Payload ' + payloadStr);

		if(!payloadObj) {
			response.setContentType('application/json');
			response.setStatus(400); //Bad Request
			response.getStreamWriter().writeString('{"text":"Invalid Request"}');
		}
		else if(!payloadObj || !payloadObj.token || payloadObj.token != 'USnUCwR6awOfZhoTS5UNkzsa') {
			response.setContentType('application/json');
			response.setStatus(200); //Bad Request
			response.getStreamWriter().writeString('{"text": "Invalid Request"}');
		}
		else {
			//Queue command for processing
			var commands = new GlideRecord(this.TABLES.SLACK_COMMANDS);
			commands.initialize();
			commands.payload = payloadStr;
			commands.status = 'pending';
			commands.insert();

			response.setContentType('application/json');
			response.setStatus(200);
			response.getStreamWriter().writeString('{"text":"Queued your command for processing."}');
		}
	},
	
	processCommand: function(commandRec) {
		if(commandRec && commandRec.payload) {
			var completed = false;
			var payloadObj = JSON.parse(commandRec.payload + '');
			if(payloadObj.trigger_id && !gs.nil(payloadObj.trigger_id.trim()) && 
			   payloadObj.response_url && !gs.nil(payloadObj.response_url.trim()) && 
			   payloadObj.channel_id && !gs.nil(payloadObj.channel_id.trim()) && 
			   payloadObj.user_id && !gs.nil(payloadObj.user_id.trim()) && 
			   payloadObj.command && !gs.nil(payloadObj.command.trim())) {
				var helper = new global.SlackGlobalHelper();
				var userSlackID =payloadObj.user_id;
				var userSysId, userRec = this._getUserRecord(userSlackID);
				if(!userRec)
					userRec = this._populateUserInfoFromSlackID(userSlackID);
				
				if(userRec)
					userSysId = userRec.user + '';
				
				var channelId = payloadObj.channel_id;
				var taskRec = this._getChannelTaskRecord(channelId);
				var command = payloadObj.command;
				var oldUser = helper.impersonateUser(userSysId);

				if(command == '/close_task') {
					//process command
					//or start a dialog
				}
				if(message && !gs.nil(message)) {
					taskRec.work_notes = message;
					taskRec.update();
					completed = true;
				}
				helper.impersonateUser(oldUser);
			}
			eventRec.status = completed == true ? 'completed' : 'ignored';
			eventRec.update();
		}
		
	},
	
	_getFieldChoices: function(gRec, fieldName) {
		var choices = [];
		var cl = new GlideRecord('sys_choice');
		cl.addQuery('name', gRec.getTableName());
		cl.addQuery('element', fieldName);
		cl.addQuery('value', gRec.getElement(fieldName).getChoices());
		cl.addQuery('language','en');
		cl.query();
		while(cl.next()) {
		  choices.push({"label": cl.label + '', "value": cl.value + ''});
		}
		return choices;
	},
	
	_log: function(message) {
		if(this.DEBUG)
			gs.info(message);
	},

	type: 'SlackUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-14 10:12:04</sys_created_on>
        <sys_id>91f2f60ddbf16300a4125411cf96190e</sys_id>
        <sys_mod_count>82</sys_mod_count>
        <sys_name>SlackUtils</sys_name>
        <sys_package display_value="Slack Integration" source="x_snc_slack_intg">08d60e89dbf52300858e70bdbf961925</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Slack Integration">08d60e89dbf52300858e70bdbf961925</sys_scope>
        <sys_update_name>sys_script_include_91f2f60ddbf16300a4125411cf96190e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-15 21:22:15</sys_updated_on>
    </sys_script_include>
</record_update>
